{"version":3,"sources":["components/TaskSelection.js","components/ContextSelection.js","components/PromptSelection.js","components/Sidebar.js","components/MainContent.js","App.js","reportWebVitals.js","index.js"],"names":["TaskSelection","_ref","taskType","updateConfig","React","createElement","id","className","type","onClick","role","aria-label","ContextSelection","selectedContextId","numContexts","contextText","Array","keys","map","contextId","key","src","alt","PromptSelection","selectedPromptId","numPrompts","promptText","promptId","Sidebar","config","task","selected_context_id","num_contexts","context_text","selected_prompt_id","num_prompts","prompt_text","MainContent","changeSelection","num_features","feat","style","visibility","interpolateColor","value","redColor","greenColor","hexToRgb","hex","bigint","parseInt","replace","Math","max","min","rgbGreen","rgbRed","t","r","g","b","toString","slice","toUpperCase","rgbToHex","round","App","setConfig","useState","tokens","selected_features","Set","feature_values","useEffect","fetch","then","response","json","data","prevConfig","context_data","isConfigComplete","divElement","document","getElementById","tokenElement","getElementsByClassName","scoreElement","rootStyles","getComputedStyle","documentElement","getPropertyValue","trim","overlayDefaultColor","selectedColor","borderDefaultColor","includes","textContent","backgroundColor","border","toFixed","color","colorTokens","from","imgElement","querySelector","imgOverlay","has","colorPatches","console","log","length","setTokens","newConfig","taskData","item","context","contextData","prompts","fill","clickedFeature","hasFeature","delete","add","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.d9bd5a63.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TaskSelection({ taskType, updateConfig }) {\n  return (\n    <div id=\"task-container\">\n      <h3>Select a Task</h3>\n      <div className=\"image-selection-grid\">\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'image' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'image')}\n        >\n            <span role=\"img\" aria-label=\"image\">üñºÔ∏è</span> Image\n        </button>\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'text' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'text')}\n        >\n            <span role=\"img\" aria-label=\"text\">üìÑ</span> Text\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskSelection;","import React from 'react';\n\nfunction ContextSelection({ selectedContextId, numContexts, taskType, contextText, updateConfig }) {\n  if (!taskType) return null;\n\n  if (taskType === 'image') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select an Image</h3>\n            <div className=\"image-selection-grid\" id='image-context-selection-grid'>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <div \n                    key={contextId}\n                    className={`context-image-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selected_context_id', contextId)}\n                >\n                    <img src={`${process.env.PUBLIC_URL}/assets/image_${contextId}.png`} alt=\"Option\"/>\n                </div>\n                ))}\n            </div>\n        </div>\n      );\n  } \n  \n  if (taskType === 'text') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select a Context</h3>\n            <div className={`text-selection-grid`}>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <button\n                    key={contextId}\n                    type=\"button\"\n                    className={`context-text-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selected_context_id', contextId)}\n                >\n                    {contextText[contextId]}\n                </button>\n                ))}\n            </div>\n        </div>\n      );\n  }\n\n  return null;\n\n}\n\nexport default ContextSelection;","import React from 'react';\n\nfunction PromptSelection({ selectedPromptId, numPrompts, taskType, promptText, updateConfig }) {\n  if (!taskType || numPrompts === null) return null;\n\n  return (\n    <div id=\"prompt-container\">\n      <h3>Select a Prompt</h3>\n      <div className=\"text-selection-grid\">\n        {[...Array(numPrompts).keys()].map((promptId) => (\n          <button\n            key={promptId}\n            type=\"button\"\n            className={`prompt-button ${selectedPromptId === promptId ? 'selected' : ''}`}\n            onClick={() => updateConfig('selected_prompt_id', promptId)}\n          >\n            {promptText[promptId]}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PromptSelection;","import React from 'react';\nimport TaskSelection from './TaskSelection';\nimport ContextSelection from './ContextSelection';\nimport PromptSelection from './PromptSelection';\n\nfunction Sidebar({ config, updateConfig }) {\n  return (\n    <div className=\"sidebar\">\n      <h2><span role=\"img\" aria-label=\"sunglasses\">üï∂Ô∏è</span> SPEX</h2>\n      <TaskSelection taskType={config.task} updateConfig={updateConfig} />\n      <ContextSelection\n        selectedContextId={config.selected_context_id}\n        numContexts={config.num_contexts}\n        taskType={config.task}\n        contextText={config.context_text}\n        updateConfig={updateConfig}\n      />\n      <PromptSelection\n        selectedPromptId={config.selected_prompt_id}\n        numPrompts={config.num_prompts}\n        taskType={config.task}\n        promptText={config.prompt_text}\n        updateConfig={updateConfig}\n      />\n    </div>\n  );\n}\n\nexport default Sidebar;","import React from 'react';\n\nfunction MainContent({ config, changeSelection}) {\n  const { task, selected_context_id, num_features } = config;\n\n  if (!task || selected_context_id === null) return null;\n\n  if (task === 'image') {\n    var content = (\n      <div className=\"main-content\">\n          <div className=\"grid-container\">\n          {[...Array(num_features).keys()].map((feat) => (\n              <div key={feat} className=\"patch\" id={`patch-${feat}`} onClick={() => changeSelection(feat)}>\n              <img src={`${process.env.PUBLIC_URL}/assets/image_${selected_context_id}/split_${feat}.png`} alt=\"Part\" />\n              <div className=\"patch-overlay\"></div>\n              <div className=\"patch-text\" style={{ visibility: 'hidden' }}></div>\n              </div>\n          ))}\n          </div>\n      </div>\n    );\n    return content;\n  }\n  \n  if (task === 'text') {\n    return (\n      <div className=\"main-content\">\n          <div className=\"text-container\">\n          {[...Array(num_features).keys()].map((feat) => (\n              <div key={feat} className=\"token-wrapper\" id={`token-${feat}`} onClick={() => changeSelection(feat)} style={{ visibility: 'hidden' }}>\n              <div className=\"token-text\">0</div>\n              <span className=\"inline-token\"></span>\n              </div>\n          ))}\n          </div>\n      </div>\n    );\n  }\n\n}\n\nfunction colorTokens(num_features, selected_features, feature_values, isConfigComplete){\n    for (let feat = 0; feat < `${num_features}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"token-text\")[0];\n\n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${overlayDefaultColor}60`;\n            tokenElement.style.border = `3px solid ${overlayDefaultColor}`;\n        } else if (selected_features.includes(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${selectedColor}60`;\n            tokenElement.style.border = `3px solid ${selectedColor}`;\n        } else {\n            scoreElement.textContent = feature_values[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            var backgroundColor = interpolateColor(feature_values[feat], redColor, greenColor)\n            tokenElement.style.backgroundColor = `${backgroundColor}60`;\n            tokenElement.style.border = `3px solid ${borderDefaultColor}`;\n            scoreElement.style.color = `${backgroundColor}`;\n        }\n    }\n}\n\nfunction colorPatches(num_features, selected_features, feature_values, isConfigComplete){\n    for (let feat = 0; feat < `${num_features}`; feat++) {\n        let divElement = document.getElementById(`patch-${feat}`);\n        let imgElement = divElement.querySelector(\"img\");\n        let imgOverlay = divElement.getElementsByClassName(\"patch-overlay\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"patch-text\")[0];\n        \n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgElement.style.border = `6px solid ${borderDefaultColor}`;\n            imgOverlay.style.border = `6px solid ${borderDefaultColor}`;\n            imgOverlay.style.backgroundColor = `#00000000`;\n        } else if (selected_features.has(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgElement.style.border = `6px solid ${selectedColor}`;\n            imgOverlay.style.border = `6px solid ${selectedColor}`;\n            imgOverlay.style.backgroundColor = `${overlayDefaultColor}60`;\n        } else {\n            scoreElement.textContent = feature_values[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            imgElement.style.border = `6px solid ${greenColor}`;\n            imgOverlay.style.border = `6px solid ${borderDefaultColor}`;\n            var backgroundColor = interpolateColor(feature_values[feat], redColor, greenColor)\n            scoreElement.style.color = `${backgroundColor}`;\n            imgOverlay.style.backgroundColor = `${backgroundColor}60`;\n        }\n    }\n}\n\nfunction setTokens(tokens){\n    console.log('tokens', tokens);\n    for (let feat = 0; feat < `${tokens.length}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        tokenElement.textContent = tokens[feat];\n        divElement.style.visibility = \"visible\";\n    }\n}\n\nexport { colorTokens , colorPatches, setTokens};\nexport default MainContent;\n\nfunction interpolateColor(value, redColor, greenColor) {\n    // Ensure value is clamped between -1 and 1\n    value = Math.max(-1, Math.min(1, value));\n    // Convert hex to RGB\n    function hexToRgb(hex) {\n        let bigint = parseInt(hex.replace(\"#\", \"\"), 16);\n        return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];\n    }\n    // Convert RGB to hex\n    function rgbToHex(r, g, b) {\n        return `#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1).toUpperCase()}`;\n    }\n    // Get RGB values\n    let rgbGreen = hexToRgb(greenColor);\n    let rgbRed = hexToRgb(redColor);\n    // Normalize value from [-1,1] to [0,1]\n    let t = (value + 1) / 2;\n    // Linear interpolation for each color channel\n    let r = Math.round(rgbRed[0] + (rgbGreen[0] - rgbRed[0]) * t);\n    let g = Math.round(rgbRed[1] + (rgbGreen[1] - rgbRed[1]) * t);\n    let b = Math.round(rgbRed[2] + (rgbGreen[2] - rgbRed[2]) * t);\n    return rgbToHex(r, g, b);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Sidebar from './components/Sidebar';\nimport MainContent, { colorTokens, colorPatches, setTokens} from './components/MainContent';\n\nfunction App() {\n  const [config, setConfig] = useState({\n    task: null,\n    selected_context_id: null,\n    selected_prompt_id: null,\n    num_contexts: null,\n    context_text: [],\n    num_prompts: null,\n    prompt_text: [],\n    tokens: [],\n    num_features: 12,\n    selected_features: new Set(),\n    feature_values: [],\n  });\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/assets/config.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setConfig((prevConfig) => ({\n          ...prevConfig,\n          context_data: data,\n        }));\n      });\n  }, []);\n\n  useEffect(() => {\n    if (config.selected_context_id !== null){\n      if (config.task === 'text') {\n        colorTokens(config.num_features, Array.from(config.selected_features), config.feature_values, config.selected_prompt_id !== null);\n      } else if (config.task === 'image') {\n        colorPatches(config.num_features, config.selected_features, config.feature_values, config.selected_prompt_id !== null);\n      }\n    }\n    console.log('config', config);\n  }, [config]);\n\n  useEffect(() => {\n    if (config.task === 'text' && config.selected_context_id !== null){\n        setTokens(config.tokens);\n    }\n  }, [config.selected_context_id, config.task, config.tokens]);\n\n  const updateConfig = (key, value) => {\n    setConfig((prevConfig) => {\n      const newConfig = { ...prevConfig, [key]: value };\n\n      if (key === 'task') {\n        const taskData = newConfig.context_data[value];\n        newConfig.num_contexts = taskData.length;\n        newConfig.context_text = taskData.map((item) => item.context);\n        newConfig.selected_context_id = null;\n        newConfig.selected_prompt_id = null;\n        newConfig.num_prompts = null;\n        newConfig.prompt_text = [];\n      }\n\n      if (key === 'selected_context_id') {\n        const taskData = newConfig.context_data[newConfig.task];\n        const contextData = taskData[value];\n        newConfig.num_prompts = contextData.prompts.length;\n        newConfig.prompt_text = contextData.prompts;\n        newConfig.selected_prompt_id = null;\n        newConfig.tokens = contextData.tokens;\n        newConfig.num_features = contextData.tokens.length;\n        newConfig.feature_values = Array(newConfig.num_features).fill(0);\n      }\n\n      if (key === 'selected_prompt_id') {\n        // const taskData = newConfig.context_data[newConfig.task];\n        // const contextData = taskData[newConfig.selected_context_id];\n        // const promptData = contextData.prompts[value];\n      }\n\n      newConfig.selected_features = new Set();\n      return newConfig;\n    });\n  };\n\n  const changeSelection = (clickedFeature) => {\n\n    if (config.selected_context_id !== null && config.selected_prompt_id !== null) {\n\n      console.log('clicked patch', clickedFeature);\n      const hasFeature = config.selected_features.has(clickedFeature);\n\n      setConfig((prevConfig) => {\n\n        if (clickedFeature === null) return prevConfig;\n\n        const newConfig = { ...prevConfig, selected_features: new Set(prevConfig.selected_features) };\n        if (hasFeature) {\n          newConfig.selected_features.delete(clickedFeature);\n        } else {\n          newConfig.selected_features.add(clickedFeature);\n        }\n\n        return newConfig;\n      });\n    }\n\n  };\n\n  return (\n    <div className=\"App\">\n      <Sidebar config={config} updateConfig={updateConfig} />\n      <MainContent config={config} changeSelection={changeSelection}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}