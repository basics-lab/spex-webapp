{"version":3,"sources":["components/TaskSelection.js","components/ContextSelection.js","components/PromptSelection.js","components/About.js","components/Sidebar.js","components/Chatbox.js","components/MainContent.js","App.js","backend/Backend.js","reportWebVitals.js","index.js"],"names":["TaskSelection","_ref","taskType","updateConfig","React","createElement","id","className","type","onClick","role","aria-label","ContextSelection","selectedContextId","numContexts","contextText","Array","keys","map","contextId","key","src","alt","PromptSelection","selectedPromptId","numPrompts","promptText","promptId","About","href","target","rel","style","height","verticalAlign","Sidebar","config","task","selectedContextID","selectedPromptID","Chatbox","prompt","response","currentPrompt","setCurrentPrompt","useState","currentResponse","setCurrentResponse","useEffect","display","alignItems","marginRight","MainContent","changeSelection","numFeatures","gridTemplateColumns","numFeatureColumns","feat","visibility","responseText","interpolateColor","value","redColor","greenColor","midpointColor","hexToRgb","hex","bigint","parseInt","replace","Math","max","min","r","g","b","rgbGreen","rgbRed","rgbMid","t","round","toString","slice","toUpperCase","rgbToHex","App","setConfig","contextData","tokens","triggerTokenSet","triggerFetchCoefficients","triggerFeatureValueCalculation","triggerTokenVisualization","appData","setAppData","coefficients","selectedFeatures","Set","featureValues","fetch","then","json","data","prevConfig","console","log","length","divElement","document","getElementById","getElementsByClassName","textContent","setTokens","async","context_id","prompt_id","fetchCoefficients","featureSums","fill","projectedCoefficients","newKey","repeat","split","newValue","i","has","join","maxVal","val","calculateFeatureValues","isConfigComplete","tokenElement","scoreElement","rootStyles","getComputedStyle","documentElement","getPropertyValue","trim","overlayDefaultColor","selectedColor","backgroundColor","border","toFixed","scoreColor","color","colorTokens","imgElement","querySelector","imgOverlay","borderDefaultColor","colorPatches","newConfig","taskData","item","context_title","prompts","responses","context","nx","ny","clickedFeature","hasFeature","delete","add","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.b2e46ca6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TaskSelection({ taskType, updateConfig }) {\n  return (\n    <div id=\"task-container\">\n      <h3>Select a Task</h3>\n      <div className=\"image-selection-grid\">\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'text' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'text')}\n        >\n            <span role=\"img\" aria-label=\"text\">📄</span> Text\n        </button>\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'image' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'image')}\n        >\n            <span role=\"img\" aria-label=\"image\">🖼️</span> Image\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskSelection;","import React from 'react';\n\nfunction ContextSelection({ selectedContextId, numContexts, taskType, contextText, updateConfig }) {\n  if (!taskType) return null;\n\n  if (taskType === 'image') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select an Image</h3>\n            <div className=\"image-selection-grid\" id='image-context-selection-grid'>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <div \n                    key={contextId}\n                    className={`context-image-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selectedContextID', contextId)}\n                >\n                    <img src={`${process.env.PUBLIC_URL}/assets/image_${contextId}/image.png`} alt=\"Option\"/>\n                </div>\n                ))}\n            </div>\n        </div>\n      );\n  } \n  \n  if (taskType === 'text') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select a Context</h3>\n            <div className={`text-selection-grid`}>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <button\n                    key={contextId}\n                    type=\"button\"\n                    className={`context-text-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selectedContextID', contextId)}\n                >\n                    {contextText[contextId]}\n                </button>\n                ))}\n            </div>\n        </div>\n      );\n  }\n\n  return null;\n\n}\n\nexport default ContextSelection;","import React from 'react';\n\nfunction PromptSelection({ selectedPromptId, numPrompts, taskType, promptText, updateConfig }) {\n  if (!taskType || numPrompts === null) return null;\n\n  return (\n    <div id=\"prompt-container\">\n      <h3>Select a Prompt</h3>\n      <div className=\"text-selection-grid\">\n        {[...Array(numPrompts).keys()].map((promptId) => (\n          <button\n            key={promptId}\n            type=\"button\"\n            className={`prompt-button ${selectedPromptId === promptId ? 'selected' : ''}`}\n            onClick={() => updateConfig('selectedPromptID', promptId)}\n          >\n            {promptText[promptId]}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PromptSelection;","import React from 'react';\n\nconst About = () => {\n    return (\n        <div className='about'>\n            <hr></hr>\n            <div>\n            Check out our paper&nbsp;\n            <a href=\"https://arxiv.org/abs/2502.13870\" target=\"_blank\" rel=\"noopener noreferrer\">SPEX: Scaling Feature Interaction Explanations for LLMs\n            </a> \n            &nbsp;on <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/ArXiv_logo_2022.png\" alt=\"arXiv logo\" style={{ height: '18px', verticalAlign: 'middle' }} />\n            &nbsp;and our Python package&nbsp;\n            <a href=\"https://github.com/basics-lab/spectral-explain\" target=\"_blank\" rel=\"noopener noreferrer\">SPEX</a>\n            &nbsp;on GitHub <img src=\"https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg\" alt=\"Github logo\" style={{ height: '18px', verticalAlign: 'middle' }}/>.\n            </div>\n            Developed by <b>Yigit Efe Erginbas</b>, Landon Butler, Justin Singh Kang, and Abhineet Agarwal.\n        </div>\n    );\n};\n\nexport default About;","import React from 'react';\nimport TaskSelection from './TaskSelection';\nimport ContextSelection from './ContextSelection';\nimport PromptSelection from './PromptSelection';\nimport About from './About';\n\nfunction Sidebar({ config, updateConfig }) {\n  return (\n    <div className=\"sidebar\">\n      <div className='config'>\n        <h2><span role=\"img\" aria-label=\"sunglasses\">🕶️</span> SPEX</h2>\n        <TaskSelection taskType={config.task} updateConfig={updateConfig} />\n        <ContextSelection\n          selectedContextId={config.selectedContextID}\n          numContexts={config.numContexts}\n          taskType={config.task}\n          contextText={config.contextText}\n          updateConfig={updateConfig}\n        />\n        <PromptSelection\n          selectedPromptId={config.selectedPromptID}\n          numPrompts={config.numPrompts}\n          taskType={config.task}\n          promptText={config.promptText}\n          updateConfig={updateConfig}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;","import React, { useState, useEffect } from 'react';\n\nconst Chatbox = ({ prompt, response }) => {\n    const [currentPrompt, setCurrentPrompt] = useState(prompt);\n    const [currentResponse, setCurrentResponse] = useState(response);\n\n    useEffect(() => {\n        setCurrentPrompt(prompt);\n        setCurrentResponse(response);\n    }, [prompt, response]);\n\n    return (\n        <div className=\"chatbox\">\n            <div className=\"messages\">\n                <div className=\"user_message\">\n                    <div className=\"message_title\">Prompt</div>\n                    {currentPrompt}\n                </div>\n                <div className=\"bot_message\">\n                    <div className=\"message_title\" style={{ display: 'flex', alignItems: 'center' }}>\n                        <img src={`${process.env.PUBLIC_URL}/assets/meta-logo.png`} alt=\"Llama-3.2 Logo\" style={{ height: '15px', marginRight: '5px' }}  /> Llama-3.2\n                    </div>\n                    {currentResponse}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Chatbox;","import React from 'react';\nimport Chatbox from './Chatbox';\nimport About from './About';\n\nfunction MainContent({ config, changeSelection}) {\n  const { task, selectedContextID, numFeatures } = config;\n\n  if (!task || selectedContextID === null) {\n    return (\n        <div className=\"main-content\">\n        <About/>\n        </div>\n    );\n  }\n\n  if (task === 'image') {\n    return (\n      <div className=\"main-content\">\n          <div className=\"image-container\">\n          <div className=\"message_title\"> Context </div>\n          <div className=\"grid-container\" style={{ gridTemplateColumns: `repeat(${config.numFeatureColumns}, 1fr)` }}>\n          {[...Array(numFeatures).keys()].map((feat) => (\n              <div key={feat} className=\"patch\" id={`patch-${feat}`} onClick={() => changeSelection(feat)}>\n              <img src={`${process.env.PUBLIC_URL}/assets/image_${selectedContextID}/patches/patch_${feat}.png`} alt=\"Part\" />\n              <div className=\"patch-overlay\"></div>\n              <div className=\"patch-text\" style={{ visibility: 'hidden' }}></div>\n              </div>\n          ))}\n          </div>\n          </div>\n          {config.selectedPromptID !== null && <Chatbox prompt={config.promptText[config.selectedPromptID]} response={config.responseText[config.selectedPromptID]} />}\n          <About/>\n      </div>\n    );\n  }\n  \n  if (task === 'text') {\n    return (\n      <div className=\"main-content\">\n          <div className=\"text-container\">\n          <div className=\"message_title\"> Context </div>\n          {[...Array(numFeatures).keys()].map((feat) => (\n              <div key={feat} className=\"token-wrapper\" id={`token-${feat}`} onClick={() => changeSelection(feat)} style={{ visibility: 'hidden', display: 'block' }}>\n              <div className=\"token-text\">0</div>\n              <span className=\"inline-token\"></span>\n              </div>\n          ))}\n          </div>\n          {config.selectedPromptID !== null && <Chatbox prompt={config.promptText[config.selectedPromptID]} response={config.responseText[config.selectedPromptID]} />}\n          <About/>\n      </div>\n    );\n  }\n\n    return null;\n\n}\n\nfunction colorTokens(numFeatures, selectedFeatures, featureValues, isConfigComplete){\n    for (let feat = 0; feat < `${numFeatures}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"token-text\")[0];\n\n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${overlayDefaultColor}60`;\n            tokenElement.style.border = `3px solid ${overlayDefaultColor}`;\n        } else if (selectedFeatures.has(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${selectedColor}60`;\n            tokenElement.style.border = `3px solid ${selectedColor}`;\n        } else {\n            scoreElement.textContent = featureValues[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            var scoreColor = interpolateColor(featureValues[feat], redColor, greenColor, overlayDefaultColor);\n            tokenElement.style.backgroundColor = `${scoreColor}60`;\n            tokenElement.style.border = `3px solid ${scoreColor}`;\n            scoreElement.style.color = `${scoreColor}`;\n        }\n    }\n}\n\nfunction colorPatches(numFeatures, selectedFeatures, featureValues, isConfigComplete){\n    for (let feat = 0; feat < `${numFeatures}`; feat++) {\n        let divElement = document.getElementById(`patch-${feat}`);\n        let imgElement = divElement.querySelector(\"img\");\n        let imgOverlay = divElement.getElementsByClassName(\"patch-overlay\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"patch-text\")[0];\n        \n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        imgElement.style.border = `4px solid ${borderDefaultColor}`;\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgOverlay.style.border = `4px solid ${borderDefaultColor}`;\n            imgOverlay.style.backgroundColor = `#00000000`;\n        } else if (selectedFeatures.has(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgOverlay.style.border = `4px solid ${selectedColor}`;\n            imgOverlay.style.backgroundColor = `${overlayDefaultColor}60`;\n        } else {\n            scoreElement.textContent = featureValues[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            var scoreColor = interpolateColor(featureValues[feat], redColor, greenColor, overlayDefaultColor);\n            imgOverlay.style.border = `4px solid ${scoreColor}`;\n            imgOverlay.style.backgroundColor = `${scoreColor}80`;\n            scoreElement.style.color = `${scoreColor}`;\n            scoreElement.style.backgroundColor = `${overlayDefaultColor}70`;\n        }\n    }\n}\n\nfunction setTokens(tokens){\n    for (let feat = 0; feat < `${tokens.length}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        tokenElement.textContent = tokens[feat];\n        divElement.style.visibility = \"visible\";\n    }\n}\n\nexport { colorTokens , colorPatches, setTokens};\nexport default MainContent;\n\nfunction interpolateColor(value, redColor, greenColor, midpointColor) {\n    // Clamp value between -1 and 1\n    value = Math.max(-1, Math.min(1, value));\n    // Convert hex to RGB\n    function hexToRgb(hex) {\n        let bigint = parseInt(hex.replace(\"#\", \"\"), 16);\n        return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];\n    }\n    // Convert RGB to hex\n    function rgbToHex(r, g, b) {\n        return `#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1).toUpperCase()}`;\n    }\n    // Get RGB values\n    let rgbGreen = hexToRgb(greenColor);\n    let rgbRed = hexToRgb(redColor);\n    let rgbMid = hexToRgb(midpointColor);\n    // Normalize value from [-1,1] to [0,1]\n    let t = (value + 1) / 2;\n    let r, g, b;\n    if (t < 0.5) {\n        // Interpolate between red and midpoint\n        t = t * 2;\n        r = Math.round(rgbRed[0] + (rgbMid[0] - rgbRed[0]) * t);\n        g = Math.round(rgbRed[1] + (rgbMid[1] - rgbRed[1]) * t);\n        b = Math.round(rgbRed[2] + (rgbMid[2] - rgbRed[2]) * t);\n    } else {\n        // Interpolate between midpoint and green\n        t = (t - 0.5) * 2;\n        r = Math.round(rgbMid[0] + (rgbGreen[0] - rgbMid[0]) * t);\n        g = Math.round(rgbMid[1] + (rgbGreen[1] - rgbMid[1]) * t);\n        b = Math.round(rgbMid[2] + (rgbGreen[2] - rgbMid[2]) * t);\n    }\n    return rgbToHex(r, g, b);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Sidebar from './components/Sidebar';\nimport MainContent, {colorTokens, colorPatches, setTokens} from './components/MainContent';\nimport {fetchCoefficients, calculateFeatureValues} from './backend/Backend';\n\nfunction App() {\n  const [config, setConfig] = useState({\n    contextData: null,\n    task: null,\n    selectedContextID: null,\n    selectedPromptID: null,\n    numContexts: null,\n    contextText: [],\n    numPrompts: null,\n    promptText: [],\n    responseText: [],\n    tokens: [],\n    numFeatures: null,\n    numFeatureColumns: null,\n    triggerTokenSet: false,\n    triggerFetchCoefficients: false,\n    triggerFeatureValueCalculation: false,\n    triggerTokenVisualization: false,\n  });\n\n  const [appData, setAppData] = useState({\n    coefficients: null,\n    selectedFeatures: new Set(),\n    featureValues: null,\n  })\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/assets/config.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setConfig((prevConfig) => ({\n          ...prevConfig,\n          contextData: data,\n        }));\n      });\n  }, []);\n\n  useEffect(() => {\n    if (config.triggerTokenSet) {\n      console.log(\"token set\");\n      config.triggerTokenSet = false;\n      setTokens(config.tokens);\n    }\n  }, [config.triggerTokenSet, config.tokens]);\n\n  useEffect(() => {\n    if (config.triggerFetchCoefficients) {\n      console.log(\"fetch coefficients\");\n      config.triggerFetchCoefficients = false;\n      fetchCoefficients(config.task, config.selectedContextID, config.selectedPromptID)\n        .then((data) => {\n          setAppData((prevConfig) => ({\n        coefficients: data,\n        selectedFeatures: new Set(),\n        featureValues: null,\n          }));\n          setConfig((prevConfig) => ({\n        ...prevConfig,\n        triggerFeatureValueCalculation: true,\n          }));\n        });\n    }\n  }, [config.triggerFetchCoefficients, config.task, config.selectedContextID, config.selectedPromptID]);\n\n  useEffect(() => {\n    if (config.triggerFeatureValueCalculation) {\n      console.log(\"calculate feature values\");\n      config.triggerFeatureValueCalculation = false;\n      calculateFeatureValues(appData.coefficients, appData.selectedFeatures, config.numFeatures)\n        .then((data) => {\n          setAppData((prevConfig) => ({\n        ...prevConfig,\n        featureValues: data,\n          }));\n          setConfig((prevConfig) => ({\n        ...prevConfig,\n        triggerTokenVisualization: true,\n          }));\n        });\n    }\n  }, [config.triggerFeatureValueCalculation, appData.coefficients, appData.selectedFeatures, config.numFeatures]);\n\n  useEffect(() => {\n    if (config.triggerTokenVisualization) {\n      console.log(\"visualize tokens\");\n      config.triggerTokenVisualization = false;\n      if (config.task === 'text') {\n        colorTokens(config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID !== null);\n      } else if (config.task === 'image') {\n        colorPatches(config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID !== null);\n      }\n    }\n  }, [config.triggerTokenVisualization, config.task, config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID]);\n\n  const updateConfig = (key, value) => {\n    setConfig((prevConfig) => {\n      const newConfig = { ...prevConfig, [key]: value };\n\n      if (key === 'task') {\n        const taskData = newConfig.contextData[value];\n        newConfig.numContexts = taskData.length;\n        newConfig.contextText = taskData.map((item) => item.context_title);\n        newConfig.selectedContextID = null;\n        newConfig.selectedPromptID = null;\n        newConfig.numPrompts = null;\n        newConfig.promptText = [];\n      }\n\n      if (key === 'selectedContextID') {\n        const taskData = newConfig.contextData[newConfig.task];\n        const contextData = taskData[value];\n        newConfig.numPrompts = contextData.prompts.length;\n        newConfig.promptText = contextData.prompts;\n        newConfig.responseText = contextData.responses;\n        newConfig.selectedPromptID = null;\n        if (newConfig.task === 'text') {\n          newConfig.tokens = contextData.context.split(' ');\n          newConfig.numFeatures = newConfig.tokens.length;\n          newConfig.numFeatureColumns = null;\n        } else if (newConfig.task === 'image') {\n          newConfig.tokens = [];\n          newConfig.numFeatures = contextData.nx * contextData.ny;\n          newConfig.numFeatureColumns = contextData.nx;\n        }\n        newConfig.triggerTokenSet = true;\n        newConfig.triggerTokenVisualization = true;\n      }\n\n      if (key === 'selectedPromptID') {\n        newConfig.triggerFetchCoefficients = true;\n      }\n\n      return newConfig;\n    });\n  };\n\n  const changeSelection = (clickedFeature) => {\n\n    if (config.selectedContextID !== null && config.selectedPromptID !== null) {\n\n      const hasFeature = appData.selectedFeatures.has(clickedFeature);\n\n      setAppData((prevConfig) => {\n\n        if (clickedFeature === null) return prevConfig;\n\n        const newConfig = { ...prevConfig, selectedFeatures: new Set(prevConfig.selectedFeatures) };\n        if (hasFeature) {\n          newConfig.selectedFeatures.delete(clickedFeature);\n        } else {\n          newConfig.selectedFeatures.add(clickedFeature);\n        }\n\n        return newConfig;\n      });\n    }\n\n    config.triggerFeatureValueCalculation = true;\n\n  };\n\n  return (\n    <div className=\"App\">\n      <Sidebar config={config} updateConfig={updateConfig} />\n      <MainContent config={config} changeSelection={changeSelection}/>\n    </div>\n  );\n}\n\nexport default App;","async function fetchCoefficients(task, context_id, prompt_id){\n    const response = await fetch(`${process.env.PUBLIC_URL}/assets/spex/${task}/context_${context_id}/prompt_${prompt_id}.json`);\n    const data = await response.json();\n    return data;\n}\n\nasync function calculateFeatureValues(coefficients, selectedFeatures, numFeatures){\n    let featureSums = new Array(numFeatures).fill(0);\n\n    // Project the Fourier coefficients\n    let projectedCoefficients = {};\n    for (let key in coefficients) {\n        var newKey = '0'.repeat(numFeatures).split(\"\");\n        var newValue = coefficients[key];\n        for (let i = 0; i < numFeatures; i++) {\n            if (key[i] === '1'){\n                if (selectedFeatures.has(i)) {\n                    newValue *= (-1);\n                } else {\n                    newKey[i] = '1'\n                }\n            }\n        }\n        newKey = newKey.join(\"\");\n        if (newKey in projectedCoefficients) {\n            projectedCoefficients[newKey] = projectedCoefficients[newKey] + newValue;\n        } else {\n            projectedCoefficients[newKey] = newValue;\n        }\n    }\n\n    // Compute influence\n    for (let key in projectedCoefficients) {\n        for (let i = 0; i < numFeatures; i++) {\n            if (key[i] === '1') {\n                featureSums[i] += (projectedCoefficients[key] ** 2);\n            }\n        }\n    }\n\n    // Normalize influence\n    let maxVal = Math.max(...featureSums);\n    if (maxVal !== 0){\n        featureSums = featureSums.map(val => val / maxVal);\n    } else {\n        featureSums = featureSums.map(val => 0);\n    }\n    return featureSums;\n}\n\nexport { fetchCoefficients, calculateFeatureValues };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}