{"version":3,"sources":["components/TaskSelection.js","components/ContextSelection.js","components/PromptSelection.js","components/Sidebar.js","components/MainContent.js","App.js","backend/Backend.js","reportWebVitals.js","index.js"],"names":["TaskSelection","_ref","taskType","updateConfig","React","createElement","id","className","type","onClick","role","aria-label","ContextSelection","selectedContextId","numContexts","contextText","Array","keys","map","contextId","key","src","alt","PromptSelection","selectedPromptId","numPrompts","promptText","promptId","Sidebar","config","task","selectedContextID","selectedPromptID","MainContent","changeSelection","numFeatures","feat","style","visibility","interpolateColor","value","redColor","greenColor","midpointColor","hexToRgb","hex","bigint","parseInt","replace","Math","max","min","r","g","b","rgbGreen","rgbRed","rgbMid","t","round","toString","slice","toUpperCase","rgbToHex","App","setConfig","useState","contextData","tokens","appData","setAppData","coefficients","selectedFeatures","Set","featureValues","useEffect","fetch","then","response","json","data","prevConfig","length","divElement","document","getElementById","getElementsByClassName","textContent","setTokens","async","context_id","prompt_id","fetchCoefficients","featureSums","fill","projectedCoefficients","newKey","repeat","split","newValue","i","has","join","maxVal","val","calculateFeatureValues","isConfigComplete","tokenElement","scoreElement","rootStyles","getComputedStyle","documentElement","getPropertyValue","trim","overlayDefaultColor","selectedColor","backgroundColor","border","toFixed","color","colorTokens","imgElement","querySelector","imgOverlay","borderDefaultColor","colorPatches","newConfig","taskData","item","context_title","prompts","context","clickedFeature","hasFeature","delete","add","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.2b1c631a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TaskSelection({ taskType, updateConfig }) {\n  return (\n    <div id=\"task-container\">\n      <h3>Select a Task</h3>\n      <div className=\"image-selection-grid\">\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'image' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'image')}\n        >\n            <span role=\"img\" aria-label=\"image\">🖼️</span> Image\n        </button>\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'text' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'text')}\n        >\n            <span role=\"img\" aria-label=\"text\">📄</span> Text\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskSelection;","import React from 'react';\n\nfunction ContextSelection({ selectedContextId, numContexts, taskType, contextText, updateConfig }) {\n  if (!taskType) return null;\n\n  if (taskType === 'image') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select an Image</h3>\n            <div className=\"image-selection-grid\" id='image-context-selection-grid'>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <div \n                    key={contextId}\n                    className={`context-image-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selectedContextID', contextId)}\n                >\n                    <img src={`${process.env.PUBLIC_URL}/assets/image_${contextId}.png`} alt=\"Option\"/>\n                </div>\n                ))}\n            </div>\n        </div>\n      );\n  } \n  \n  if (taskType === 'text') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select a Context</h3>\n            <div className={`text-selection-grid`}>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <button\n                    key={contextId}\n                    type=\"button\"\n                    className={`context-text-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selectedContextID', contextId)}\n                >\n                    {contextText[contextId]}\n                </button>\n                ))}\n            </div>\n        </div>\n      );\n  }\n\n  return null;\n\n}\n\nexport default ContextSelection;","import React from 'react';\n\nfunction PromptSelection({ selectedPromptId, numPrompts, taskType, promptText, updateConfig }) {\n  if (!taskType || numPrompts === null) return null;\n\n  return (\n    <div id=\"prompt-container\">\n      <h3>Select a Prompt</h3>\n      <div className=\"text-selection-grid\">\n        {[...Array(numPrompts).keys()].map((promptId) => (\n          <button\n            key={promptId}\n            type=\"button\"\n            className={`prompt-button ${selectedPromptId === promptId ? 'selected' : ''}`}\n            onClick={() => updateConfig('selectedPromptID', promptId)}\n          >\n            {promptText[promptId]}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PromptSelection;","import React from 'react';\nimport TaskSelection from './TaskSelection';\nimport ContextSelection from './ContextSelection';\nimport PromptSelection from './PromptSelection';\n\nfunction Sidebar({ config, updateConfig }) {\n  return (\n    <div className=\"sidebar\">\n      <h2><span role=\"img\" aria-label=\"sunglasses\">🕶️</span> SPEX</h2>\n      <TaskSelection taskType={config.task} updateConfig={updateConfig} />\n      <ContextSelection\n        selectedContextId={config.selectedContextID}\n        numContexts={config.numContexts}\n        taskType={config.task}\n        contextText={config.contextText}\n        updateConfig={updateConfig}\n      />\n      <PromptSelection\n        selectedPromptId={config.selectedPromptID}\n        numPrompts={config.numPrompts}\n        taskType={config.task}\n        promptText={config.promptText}\n        updateConfig={updateConfig}\n      />\n    </div>\n  );\n}\n\nexport default Sidebar;","import React from 'react';\n\nfunction MainContent({ config, changeSelection}) {\n  const { task, selectedContextID, numFeatures } = config;\n\n  if (!task || selectedContextID === null) return null;\n\n  if (task === 'image') {\n    var content = (\n      <div className=\"main-content\">\n          <div className=\"grid-container\">\n          {[...Array(numFeatures).keys()].map((feat) => (\n              <div key={feat} className=\"patch\" id={`patch-${feat}`} onClick={() => changeSelection(feat)}>\n              <img src={`${process.env.PUBLIC_URL}/assets/image_${selectedContextID}/split_${feat}.png`} alt=\"Part\" />\n              <div className=\"patch-overlay\"></div>\n              <div className=\"patch-text\" style={{ visibility: 'hidden' }}></div>\n              </div>\n          ))}\n          </div>\n      </div>\n    );\n    return content;\n  }\n  \n  if (task === 'text') {\n    return (\n      <div className=\"main-content\">\n          <div className=\"text-container\">\n          {[...Array(numFeatures).keys()].map((feat) => (\n              <div key={feat} className=\"token-wrapper\" id={`token-${feat}`} onClick={() => changeSelection(feat)} style={{ visibility: 'hidden' }}>\n              <div className=\"token-text\">0</div>\n              <span className=\"inline-token\"></span>\n              </div>\n          ))}\n          </div>\n      </div>\n    );\n  }\n\n}\n\nfunction colorTokens(numFeatures, selectedFeatures, featureValues, isConfigComplete){\n    for (let feat = 0; feat < `${numFeatures}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"token-text\")[0];\n\n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${overlayDefaultColor}60`;\n            tokenElement.style.border = `3px solid ${overlayDefaultColor}`;\n        } else if (selectedFeatures.has(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${selectedColor}60`;\n            tokenElement.style.border = `3px solid ${selectedColor}`;\n        } else {\n            scoreElement.textContent = featureValues[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            var backgroundColor = interpolateColor(featureValues[feat], redColor, greenColor, overlayDefaultColor);\n            tokenElement.style.backgroundColor = `${backgroundColor}60`;\n            tokenElement.style.border = `3px solid ${backgroundColor}`;\n            scoreElement.style.color = `${backgroundColor}`;\n        }\n    }\n}\n\nfunction colorPatches(numFeatures, selectedFeatures, featureValues, isConfigComplete){\n    for (let feat = 0; feat < `${numFeatures}`; feat++) {\n        let divElement = document.getElementById(`patch-${feat}`);\n        let imgElement = divElement.querySelector(\"img\");\n        let imgOverlay = divElement.getElementsByClassName(\"patch-overlay\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"patch-text\")[0];\n        \n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgElement.style.border = `6px solid ${borderDefaultColor}`;\n            imgOverlay.style.border = `6px solid ${borderDefaultColor}`;\n            imgOverlay.style.backgroundColor = `#00000000`;\n        } else if (selectedFeatures.has(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgElement.style.border = `6px solid ${selectedColor}`;\n            imgOverlay.style.border = `6px solid ${selectedColor}`;\n            imgOverlay.style.backgroundColor = `${overlayDefaultColor}60`;\n        } else {\n            scoreElement.textContent = featureValues[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            var backgroundColor = interpolateColor(featureValues[feat], redColor, greenColor, overlayDefaultColor);\n            imgElement.style.border = `6px solid ${backgroundColor}`;\n            imgOverlay.style.border = `6px solid ${backgroundColor}`;\n            scoreElement.style.color = `${backgroundColor}`;\n            imgOverlay.style.backgroundColor = `${backgroundColor}60`;\n        }\n    }\n}\n\nfunction setTokens(tokens){\n    for (let feat = 0; feat < `${tokens.length}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        tokenElement.textContent = tokens[feat];\n        divElement.style.visibility = \"visible\";\n    }\n}\n\nexport { colorTokens , colorPatches, setTokens};\nexport default MainContent;\n\nfunction interpolateColor(value, redColor, greenColor, midpointColor) {\n    // Clamp value between -1 and 1\n    value = Math.max(-1, Math.min(1, value));\n    // Convert hex to RGB\n    function hexToRgb(hex) {\n        let bigint = parseInt(hex.replace(\"#\", \"\"), 16);\n        return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];\n    }\n    // Convert RGB to hex\n    function rgbToHex(r, g, b) {\n        return `#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1).toUpperCase()}`;\n    }\n    // Get RGB values\n    let rgbGreen = hexToRgb(greenColor);\n    let rgbRed = hexToRgb(redColor);\n    let rgbMid = hexToRgb(midpointColor);\n    // Normalize value from [-1,1] to [0,1]\n    let t = (value + 1) / 2;\n    let r, g, b;\n    if (t < 0.5) {\n        // Interpolate between red and midpoint\n        t = t * 2;\n        r = Math.round(rgbRed[0] + (rgbMid[0] - rgbRed[0]) * t);\n        g = Math.round(rgbRed[1] + (rgbMid[1] - rgbRed[1]) * t);\n        b = Math.round(rgbRed[2] + (rgbMid[2] - rgbRed[2]) * t);\n    } else {\n        // Interpolate between midpoint and green\n        t = (t - 0.5) * 2;\n        r = Math.round(rgbMid[0] + (rgbGreen[0] - rgbMid[0]) * t);\n        g = Math.round(rgbMid[1] + (rgbGreen[1] - rgbMid[1]) * t);\n        b = Math.round(rgbMid[2] + (rgbGreen[2] - rgbMid[2]) * t);\n    }\n    return rgbToHex(r, g, b);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Sidebar from './components/Sidebar';\nimport MainContent, {colorTokens, colorPatches, setTokens} from './components/MainContent';\nimport {fetchCoefficients, calculateFeatureValues} from './backend/Backend';\n\nfunction App() {\n  const [config, setConfig] = useState({\n    contextData: null,\n    task: null,\n    selectedContextID: null,\n    selectedPromptID: null,\n    numContexts: null,\n    contextText: [],\n    numPrompts: null,\n    promptText: [],\n    tokens: [],\n    numFeatures: 12,\n  });\n\n  const [appData, setAppData] = useState({\n    coefficients: null,\n    selectedFeatures: new Set(),\n    featureValues: null,\n  })\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/assets/config.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setConfig((prevConfig) => ({\n          ...prevConfig,\n          contextData: data,\n        }));\n      });\n  }, []);\n\n  useEffect(() => {\n    if (config.task === 'text' && config.selectedContextID !== null){\n        setTokens(config.tokens);\n    };\n    if (config.task !== null && config.selectedContextID !== null && config.selectedPromptID !== null) {\n      fetchCoefficients(config.task, config.selectedContextID, config.selectedPromptID)\n      .then((data) => {\n        setAppData((prevConfig) => ({\n          ...prevConfig,\n          coefficients: data,\n        }));\n      });\n    };\n  }, [config]);\n\n  useEffect(() => {\n    if (config.selectedPromptID !== null){\n      calculateFeatureValues(appData.coefficients, appData.selectedFeatures, config.numFeatures)\n      .then((data) => {\n        setAppData((prevConfig) => ({\n          ...prevConfig,\n          featureValues: data,\n        }));\n      });\n    }\n  }, [config, appData.coefficients, appData.selectedFeatures]);\n\n  useEffect(() => {\n    if (appData.featureValues !== null){\n      if (config.task === 'text') {\n        colorTokens(config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID !== null);\n      } else if (config.task === 'image') {\n        colorPatches(config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID !== null);\n      }\n    }\n  }, [config, appData.selectedFeatures, appData.featureValues]);\n\n  const updateConfig = (key, value) => {\n    setConfig((prevConfig) => {\n      const newConfig = { ...prevConfig, [key]: value };\n\n      if (key === 'task') {\n        const taskData = newConfig.contextData[value];\n        newConfig.numContexts = taskData.length;\n        newConfig.contextText = taskData.map((item) => item.context_title);\n        newConfig.selectedContextID = null;\n        newConfig.selectedPromptID = null;\n        newConfig.numPrompts = null;\n        newConfig.promptText = [];\n      }\n\n      if (key === 'selectedContextID') {\n        const taskData = newConfig.contextData[newConfig.task];\n        const contextData = taskData[value];\n        newConfig.numPrompts = contextData.prompts.length;\n        newConfig.promptText = contextData.prompts;\n        newConfig.selectedPromptID = null;\n        if (newConfig.task === 'text') {\n          newConfig.tokens = contextData.context.split(' ');\n          newConfig.numFeatures = newConfig.tokens.length;\n        } else if (newConfig.task === 'image') {\n          newConfig.tokens = [];\n          newConfig.numFeatures = 12;\n        }\n      }\n\n      if (key === 'selectedPromptID') {\n        // const taskData = newConfig.contextData[newConfig.task];\n        // const contextData = taskData[newConfig.selectedContextID];\n        // const promptData = contextData.prompts[value];\n      }\n\n      newConfig.selectedFeatures = new Set();\n      return newConfig;\n    });\n  };\n\n  const changeSelection = (clickedFeature) => {\n\n    if (config.selectedContextID !== null && config.selectedPromptID !== null) {\n\n      const hasFeature = appData.selectedFeatures.has(clickedFeature);\n\n      setAppData((prevConfig) => {\n\n        if (clickedFeature === null) return prevConfig;\n\n        const newConfig = { ...prevConfig, selectedFeatures: new Set(prevConfig.selectedFeatures) };\n        if (hasFeature) {\n          newConfig.selectedFeatures.delete(clickedFeature);\n        } else {\n          newConfig.selectedFeatures.add(clickedFeature);\n        }\n\n        return newConfig;\n      });\n    }\n\n  };\n\n  return (\n    <div className=\"App\">\n      <Sidebar config={config} updateConfig={updateConfig} />\n      <MainContent config={config} changeSelection={changeSelection}/>\n    </div>\n  );\n}\n\nexport default App;","async function fetchCoefficients(task, context_id, prompt_id){\n    const response = await fetch(`${process.env.PUBLIC_URL}/assets/spex/${task}/context_${context_id}/prompt_${prompt_id}.json`);\n    const data = await response.json();\n    return data;\n}\n\nasync function calculateFeatureValues(coefficients, selectedFeatures, numFeatures){\n    let featureSums = new Array(numFeatures).fill(0);\n\n    // Project the Fourier coefficients\n    let projectedCoefficients = {};\n    for (let key in coefficients) {\n        var newKey = '0'.repeat(numFeatures).split(\"\");\n        var newValue = coefficients[key];\n        for (let i = 0; i < numFeatures; i++) {\n            if (key[i] === '1'){\n                if (selectedFeatures.has(i)) {\n                    newValue *= (-1);\n                } else {\n                    newKey[i] = '1'\n                }\n            }\n        }\n        newKey = newKey.join(\"\");\n        if (newKey in projectedCoefficients) {\n            projectedCoefficients[newKey] = projectedCoefficients[newKey] + newValue;\n        } else {\n            projectedCoefficients[newKey] = newValue;\n        }\n    }\n\n    // Compute influence\n    for (let key in projectedCoefficients) {\n        for (let i = 0; i < numFeatures; i++) {\n            if (key[i] === '1') {\n                featureSums[i] += (projectedCoefficients[key] ** 2);\n            }\n        }\n    }\n\n    // Normalize influence\n    let maxVal = Math.max(...featureSums);\n    if (maxVal !== 0){\n        featureSums = featureSums.map(val => val / maxVal);\n    } else {\n        featureSums = featureSums.map(val => 0);\n    }\n    return featureSums;\n}\n\nexport { fetchCoefficients, calculateFeatureValues };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}