{"version":3,"sources":["components/TaskSelection.js","components/ContextSelection.js","components/PromptSelection.js","components/Sidebar.js","components/Chatbox.js","components/MainContent.js","App.js","backend/Backend.js","reportWebVitals.js","index.js"],"names":["TaskSelection","_ref","taskType","updateConfig","React","createElement","id","className","type","onClick","role","aria-label","ContextSelection","selectedContextId","numContexts","contextText","Array","keys","map","contextId","key","src","alt","PromptSelection","selectedPromptId","numPrompts","promptText","promptId","Sidebar","config","task","selectedContextID","selectedPromptID","Chatbox","prompt","response","currentPrompt","setCurrentPrompt","useState","currentResponse","setCurrentResponse","useEffect","style","display","alignItems","height","marginRight","MainContent","changeSelection","numFeatures","content","feat","visibility","responseText","interpolateColor","value","redColor","greenColor","midpointColor","hexToRgb","hex","bigint","parseInt","replace","Math","max","min","r","g","b","rgbGreen","rgbRed","rgbMid","t","round","toString","slice","toUpperCase","rgbToHex","App","setConfig","contextData","tokens","triggerTokenSet","triggerFetchCoefficients","triggerFeatureValueCalculation","triggerTokenVisualization","appData","setAppData","coefficients","selectedFeatures","Set","featureValues","fetch","then","json","data","prevConfig","console","log","length","divElement","document","getElementById","getElementsByClassName","textContent","setTokens","async","context_id","prompt_id","fetchCoefficients","featureSums","fill","projectedCoefficients","newKey","repeat","split","newValue","i","has","join","maxVal","val","calculateFeatureValues","isConfigComplete","tokenElement","scoreElement","rootStyles","getComputedStyle","documentElement","getPropertyValue","trim","overlayDefaultColor","selectedColor","backgroundColor","border","toFixed","color","colorTokens","imgElement","querySelector","imgOverlay","borderDefaultColor","colorPatches","newConfig","taskData","item","context_title","prompts","responses","context","clickedFeature","hasFeature","delete","add","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.15ef29d8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TaskSelection({ taskType, updateConfig }) {\n  return (\n    <div id=\"task-container\">\n      <h3>Select a Task</h3>\n      <div className=\"image-selection-grid\">\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'image' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'image')}\n        >\n            <span role=\"img\" aria-label=\"image\">🖼️</span> Image\n        </button>\n        <button\n            type=\"button\"\n            className={`task-button ${taskType === 'text' ? 'selected' : ''}`}\n            onClick={() => updateConfig('task', 'text')}\n        >\n            <span role=\"img\" aria-label=\"text\">📄</span> Text\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskSelection;","import React from 'react';\n\nfunction ContextSelection({ selectedContextId, numContexts, taskType, contextText, updateConfig }) {\n  if (!taskType) return null;\n\n  if (taskType === 'image') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select an Image</h3>\n            <div className=\"image-selection-grid\" id='image-context-selection-grid'>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <div \n                    key={contextId}\n                    className={`context-image-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selectedContextID', contextId)}\n                >\n                    <img src={`${process.env.PUBLIC_URL}/assets/image_${contextId}.png`} alt=\"Option\"/>\n                </div>\n                ))}\n            </div>\n        </div>\n      );\n  } \n  \n  if (taskType === 'text') {\n    return (\n        <div id=\"context-container\">\n            <h3>Select a Context</h3>\n            <div className={`text-selection-grid`}>\n                {[...Array(numContexts).keys()].map((contextId) => (\n                <button\n                    key={contextId}\n                    type=\"button\"\n                    className={`context-text-button ${selectedContextId === contextId ? 'selected' : ''}`}\n                    onClick={() => updateConfig('selectedContextID', contextId)}\n                >\n                    {contextText[contextId]}\n                </button>\n                ))}\n            </div>\n        </div>\n      );\n  }\n\n  return null;\n\n}\n\nexport default ContextSelection;","import React from 'react';\n\nfunction PromptSelection({ selectedPromptId, numPrompts, taskType, promptText, updateConfig }) {\n  if (!taskType || numPrompts === null) return null;\n\n  return (\n    <div id=\"prompt-container\">\n      <h3>Select a Prompt</h3>\n      <div className=\"text-selection-grid\">\n        {[...Array(numPrompts).keys()].map((promptId) => (\n          <button\n            key={promptId}\n            type=\"button\"\n            className={`prompt-button ${selectedPromptId === promptId ? 'selected' : ''}`}\n            onClick={() => updateConfig('selectedPromptID', promptId)}\n          >\n            {promptText[promptId]}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PromptSelection;","import React from 'react';\nimport TaskSelection from './TaskSelection';\nimport ContextSelection from './ContextSelection';\nimport PromptSelection from './PromptSelection';\n\nfunction Sidebar({ config, updateConfig }) {\n  return (\n    <div className=\"sidebar\">\n      <h2><span role=\"img\" aria-label=\"sunglasses\">🕶️</span> SPEX</h2>\n      <TaskSelection taskType={config.task} updateConfig={updateConfig} />\n      <ContextSelection\n        selectedContextId={config.selectedContextID}\n        numContexts={config.numContexts}\n        taskType={config.task}\n        contextText={config.contextText}\n        updateConfig={updateConfig}\n      />\n      <PromptSelection\n        selectedPromptId={config.selectedPromptID}\n        numPrompts={config.numPrompts}\n        taskType={config.task}\n        promptText={config.promptText}\n        updateConfig={updateConfig}\n      />\n    </div>\n  );\n}\n\nexport default Sidebar;","import React, { useState, useEffect } from 'react';\n\nconst Chatbox = ({ prompt, response }) => {\n    const [currentPrompt, setCurrentPrompt] = useState(prompt);\n    const [currentResponse, setCurrentResponse] = useState(response);\n\n    useEffect(() => {\n        setCurrentPrompt(prompt);\n        setCurrentResponse(response);\n    }, [prompt, response]);\n\n    return (\n        <div className=\"chatbox\">\n            <div className=\"messages\">\n                <div className=\"user_message\">\n                    <div className=\"message_title\">Prompt</div>\n                    {currentPrompt}\n                </div>\n                <div className=\"bot_message\">\n                    <div className=\"message_title\" style={{ display: 'flex', alignItems: 'center' }}>\n                        <img src={`${process.env.PUBLIC_URL}/assets/meta-logo.png`} alt=\"Llama-3.2 Logo\" style={{ height: '15px', marginRight: '5px' }}  /> Llama-3.2\n                    </div>\n                    {currentResponse}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Chatbox;","import React from 'react';\nimport Chatbox from './Chatbox';\n\nfunction MainContent({ config, changeSelection}) {\n  const { task, selectedContextID, numFeatures } = config;\n\n  if (!task || selectedContextID === null) return null;\n\n  var content = (\n    <div className=\"main-content\">\n        {}\n    </div>\n  );\n\n  if (task === 'image') {\n    var content = (\n      <div className=\"main-content\">\n          <div className=\"grid-container\">\n          <div className=\"message_title\"> Context </div>\n          {[...Array(numFeatures).keys()].map((feat) => (\n              <div key={feat} className=\"patch\" id={`patch-${feat}`} onClick={() => changeSelection(feat)}>\n              <img src={`${process.env.PUBLIC_URL}/assets/image_${selectedContextID}/split_${feat}.png`} alt=\"Part\" />\n              <div className=\"patch-overlay\"></div>\n              <div className=\"patch-text\" style={{ visibility: 'hidden' }}></div>\n              </div>\n          ))}\n          </div>\n          <Chatbox />\n      </div>\n    );\n    return content;\n  }\n  \n  if (task === 'text') {\n    var content = (\n      <div className=\"main-content\">\n          <div className=\"text-container\">\n          <div className=\"message_title\"> Context </div>\n          {[...Array(numFeatures).keys()].map((feat) => (\n              <div key={feat} className=\"token-wrapper\" id={`token-${feat}`} onClick={() => changeSelection(feat)} style={{ visibility: 'hidden', display: 'block' }}>\n              <div className=\"token-text\">0</div>\n              <span className=\"inline-token\"></span>\n              </div>\n          ))}\n          </div>\n          {config.selectedPromptID !== null && <Chatbox prompt={config.promptText[config.selectedPromptID]} response={config.responseText[config.selectedPromptID]} />}\n      </div>\n    );\n  }\n\n    return content;\n\n}\n\nfunction colorTokens(numFeatures, selectedFeatures, featureValues, isConfigComplete){\n    for (let feat = 0; feat < `${numFeatures}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"token-text\")[0];\n\n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${overlayDefaultColor}60`;\n            tokenElement.style.border = `3px solid ${overlayDefaultColor}`;\n        } else if (selectedFeatures.has(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            tokenElement.style.backgroundColor = `${selectedColor}60`;\n            tokenElement.style.border = `3px solid ${selectedColor}`;\n        } else {\n            scoreElement.textContent = featureValues[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            var backgroundColor = interpolateColor(featureValues[feat], redColor, greenColor, overlayDefaultColor);\n            tokenElement.style.backgroundColor = `${backgroundColor}60`;\n            tokenElement.style.border = `3px solid ${backgroundColor}`;\n            scoreElement.style.color = `${backgroundColor}`;\n        }\n    }\n}\n\nfunction colorPatches(numFeatures, selectedFeatures, featureValues, isConfigComplete){\n    for (let feat = 0; feat < `${numFeatures}`; feat++) {\n        let divElement = document.getElementById(`patch-${feat}`);\n        let imgElement = divElement.querySelector(\"img\");\n        let imgOverlay = divElement.getElementsByClassName(\"patch-overlay\")[0];\n        let scoreElement = divElement.getElementsByClassName(\"patch-text\")[0];\n        \n        let rootStyles = getComputedStyle(document.documentElement);\n        let greenColor = rootStyles.getPropertyValue('--overlay-positive-color').trim();\n        let redColor = rootStyles.getPropertyValue('--overlay-negative-color').trim();\n        let overlayDefaultColor = rootStyles.getPropertyValue('--overlay-default-color').trim();\n        let selectedColor = rootStyles.getPropertyValue('--border-selected-color').trim();\n        let borderDefaultColor = rootStyles.getPropertyValue('--border-default-color').trim();\n\n        if (!isConfigComplete) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgElement.style.border = `6px solid ${borderDefaultColor}`;\n            imgOverlay.style.border = `6px solid ${borderDefaultColor}`;\n            imgOverlay.style.backgroundColor = `#00000000`;\n        } else if (selectedFeatures.has(feat)) {\n            scoreElement.textContent = \"\";\n            scoreElement.style.visibility = \"hidden\";\n            imgElement.style.border = `6px solid ${selectedColor}`;\n            imgOverlay.style.border = `6px solid ${selectedColor}`;\n            imgOverlay.style.backgroundColor = `${overlayDefaultColor}60`;\n        } else {\n            scoreElement.textContent = featureValues[feat].toFixed(2);\n            scoreElement.style.visibility = \"visible\";\n            var backgroundColor = interpolateColor(featureValues[feat], redColor, greenColor, overlayDefaultColor);\n            imgElement.style.border = `6px solid ${backgroundColor}`;\n            imgOverlay.style.border = `6px solid ${backgroundColor}`;\n            scoreElement.style.color = `${backgroundColor}`;\n            imgOverlay.style.backgroundColor = `${backgroundColor}60`;\n        }\n    }\n}\n\nfunction setTokens(tokens){\n    for (let feat = 0; feat < `${tokens.length}`; feat++) {\n        let divElement = document.getElementById(`token-${feat}`);\n        let tokenElement = divElement.getElementsByClassName(\"inline-token\")[0];\n        tokenElement.textContent = tokens[feat];\n        divElement.style.visibility = \"visible\";\n    }\n}\n\nexport { colorTokens , colorPatches, setTokens};\nexport default MainContent;\n\nfunction interpolateColor(value, redColor, greenColor, midpointColor) {\n    // Clamp value between -1 and 1\n    value = Math.max(-1, Math.min(1, value));\n    // Convert hex to RGB\n    function hexToRgb(hex) {\n        let bigint = parseInt(hex.replace(\"#\", \"\"), 16);\n        return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];\n    }\n    // Convert RGB to hex\n    function rgbToHex(r, g, b) {\n        return `#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1).toUpperCase()}`;\n    }\n    // Get RGB values\n    let rgbGreen = hexToRgb(greenColor);\n    let rgbRed = hexToRgb(redColor);\n    let rgbMid = hexToRgb(midpointColor);\n    // Normalize value from [-1,1] to [0,1]\n    let t = (value + 1) / 2;\n    let r, g, b;\n    if (t < 0.5) {\n        // Interpolate between red and midpoint\n        t = t * 2;\n        r = Math.round(rgbRed[0] + (rgbMid[0] - rgbRed[0]) * t);\n        g = Math.round(rgbRed[1] + (rgbMid[1] - rgbRed[1]) * t);\n        b = Math.round(rgbRed[2] + (rgbMid[2] - rgbRed[2]) * t);\n    } else {\n        // Interpolate between midpoint and green\n        t = (t - 0.5) * 2;\n        r = Math.round(rgbMid[0] + (rgbGreen[0] - rgbMid[0]) * t);\n        g = Math.round(rgbMid[1] + (rgbGreen[1] - rgbMid[1]) * t);\n        b = Math.round(rgbMid[2] + (rgbGreen[2] - rgbMid[2]) * t);\n    }\n    return rgbToHex(r, g, b);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Sidebar from './components/Sidebar';\nimport MainContent, {colorTokens, colorPatches, setTokens} from './components/MainContent';\nimport {fetchCoefficients, calculateFeatureValues} from './backend/Backend';\n\nfunction App() {\n  const [config, setConfig] = useState({\n    contextData: null,\n    task: null,\n    selectedContextID: null,\n    selectedPromptID: null,\n    numContexts: null,\n    contextText: [],\n    numPrompts: null,\n    promptText: [],\n    responseText: [],\n    tokens: [],\n    numFeatures: 12,\n    triggerTokenSet: false,\n    triggerFetchCoefficients: false,\n    triggerFeatureValueCalculation: false,\n    triggerTokenVisualization: false,\n  });\n\n  const [appData, setAppData] = useState({\n    coefficients: null,\n    selectedFeatures: new Set(),\n    featureValues: null,\n  })\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/assets/config.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setConfig((prevConfig) => ({\n          ...prevConfig,\n          contextData: data,\n        }));\n      });\n  }, []);\n\n  useEffect(() => {\n    if (config.triggerTokenSet) {\n      console.log(\"token set\");\n      config.triggerTokenSet = false;\n      setTokens(config.tokens);\n    }\n  }, [config.triggerTokenSet, config.tokens]);\n\n  useEffect(() => {\n    if (config.triggerFetchCoefficients) {\n      console.log(\"fetch coefficients\");\n      config.triggerFetchCoefficients = false;\n      fetchCoefficients(config.task, config.selectedContextID, config.selectedPromptID)\n        .then((data) => {\n          setAppData((prevConfig) => ({\n        coefficients: data,\n        selectedFeatures: new Set(),\n        featureValues: null,\n          }));\n          setConfig((prevConfig) => ({\n        ...prevConfig,\n        triggerFeatureValueCalculation: true,\n          }));\n        });\n    }\n  }, [config.triggerFetchCoefficients, config.task, config.selectedContextID, config.selectedPromptID]);\n\n  useEffect(() => {\n    if (config.triggerFeatureValueCalculation) {\n      console.log(\"calculate feature values\");\n      config.triggerFeatureValueCalculation = false;\n      calculateFeatureValues(appData.coefficients, appData.selectedFeatures, config.numFeatures)\n        .then((data) => {\n          setAppData((prevConfig) => ({\n        ...prevConfig,\n        featureValues: data,\n          }));\n          setConfig((prevConfig) => ({\n        ...prevConfig,\n        triggerTokenVisualization: true,\n          }));\n        });\n    }\n  }, [config.triggerFeatureValueCalculation, appData.coefficients, appData.selectedFeatures, config.numFeatures]);\n\n  useEffect(() => {\n    if (config.triggerTokenVisualization) {\n      console.log(\"visualize tokens\");\n      config.triggerTokenVisualization = false;\n      if (config.task === 'text') {\n        colorTokens(config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID !== null);\n      } else if (config.task === 'image') {\n        colorPatches(config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID !== null);\n      }\n    }\n  }, [config.triggerTokenVisualization, config.task, config.numFeatures, appData.selectedFeatures, appData.featureValues, config.selectedPromptID]);\n\n  const updateConfig = (key, value) => {\n    setConfig((prevConfig) => {\n      const newConfig = { ...prevConfig, [key]: value };\n\n      if (key === 'task') {\n        const taskData = newConfig.contextData[value];\n        newConfig.numContexts = taskData.length;\n        newConfig.contextText = taskData.map((item) => item.context_title);\n        newConfig.selectedContextID = null;\n        newConfig.selectedPromptID = null;\n        newConfig.numPrompts = null;\n        newConfig.promptText = [];\n      }\n\n      if (key === 'selectedContextID') {\n        const taskData = newConfig.contextData[newConfig.task];\n        const contextData = taskData[value];\n        newConfig.numPrompts = contextData.prompts.length;\n        newConfig.promptText = contextData.prompts;\n        newConfig.responseText = contextData.responses;\n        newConfig.selectedPromptID = null;\n        if (newConfig.task === 'text') {\n          newConfig.tokens = contextData.context.split(' ');\n          newConfig.numFeatures = newConfig.tokens.length;\n        } else if (newConfig.task === 'image') {\n          newConfig.tokens = [];\n          newConfig.numFeatures = 12;\n        }\n        newConfig.triggerTokenSet = true;\n        newConfig.triggerTokenVisualization = true;\n      }\n\n      if (key === 'selectedPromptID') {\n        newConfig.triggerFetchCoefficients = true;\n      }\n\n      return newConfig;\n    });\n  };\n\n  const changeSelection = (clickedFeature) => {\n\n    if (config.selectedContextID !== null && config.selectedPromptID !== null) {\n\n      const hasFeature = appData.selectedFeatures.has(clickedFeature);\n\n      setAppData((prevConfig) => {\n\n        if (clickedFeature === null) return prevConfig;\n\n        const newConfig = { ...prevConfig, selectedFeatures: new Set(prevConfig.selectedFeatures) };\n        if (hasFeature) {\n          newConfig.selectedFeatures.delete(clickedFeature);\n        } else {\n          newConfig.selectedFeatures.add(clickedFeature);\n        }\n\n        return newConfig;\n      });\n    }\n\n    config.triggerFeatureValueCalculation = true;\n\n  };\n\n  return (\n    <div className=\"App\">\n      <Sidebar config={config} updateConfig={updateConfig} />\n      <MainContent config={config} changeSelection={changeSelection}/>\n    </div>\n  );\n}\n\nexport default App;","async function fetchCoefficients(task, context_id, prompt_id){\n    const response = await fetch(`${process.env.PUBLIC_URL}/assets/spex/${task}/context_${context_id}/prompt_${prompt_id}.json`);\n    const data = await response.json();\n    return data;\n}\n\nasync function calculateFeatureValues(coefficients, selectedFeatures, numFeatures){\n    let featureSums = new Array(numFeatures).fill(0);\n\n    // Project the Fourier coefficients\n    let projectedCoefficients = {};\n    for (let key in coefficients) {\n        var newKey = '0'.repeat(numFeatures).split(\"\");\n        var newValue = coefficients[key];\n        for (let i = 0; i < numFeatures; i++) {\n            if (key[i] === '1'){\n                if (selectedFeatures.has(i)) {\n                    newValue *= (-1);\n                } else {\n                    newKey[i] = '1'\n                }\n            }\n        }\n        newKey = newKey.join(\"\");\n        if (newKey in projectedCoefficients) {\n            projectedCoefficients[newKey] = projectedCoefficients[newKey] + newValue;\n        } else {\n            projectedCoefficients[newKey] = newValue;\n        }\n    }\n\n    // Compute influence\n    for (let key in projectedCoefficients) {\n        for (let i = 0; i < numFeatures; i++) {\n            if (key[i] === '1') {\n                featureSums[i] += (projectedCoefficients[key] ** 2);\n            }\n        }\n    }\n\n    // Normalize influence\n    let maxVal = Math.max(...featureSums);\n    if (maxVal !== 0){\n        featureSums = featureSums.map(val => val / maxVal);\n    } else {\n        featureSums = featureSums.map(val => 0);\n    }\n    return featureSums;\n}\n\nexport { fetchCoefficients, calculateFeatureValues };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}